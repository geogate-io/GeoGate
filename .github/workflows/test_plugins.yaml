name: Test plugins

env:
  spack_version: v1.0.0-alpha.2
  esmf_version: develop
  compiler_version: latest
  install_dir: ${{ github.workspace }}/app

on:
  push:
    branches: [ main, feature/cicd ]
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
    - name: Install Core Development Tools
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install wget tar unzip file gringo
        sudo apt-get -qq install build-essential binutils-dev gfortran
        sudo apt-get -qq install python3-dev python3-pip python3-yaml
        sudo apt-get -qq install curl libcurl4-openssl-dev tcl tcl-dev
      shell: bash

    - name: Checkout Component Repository
      uses: actions/checkout@v4
      with:
        path: ${{ env.install_dir }}/geogate

    - name: Install Lua and Lmod
      run: |
        LUA_VERSION=5.1.4.9
        LMOD_VERSION=8.7
        mkdir ${{ env.install_dir }}/progs
        cd ${{ env.install_dir }}/progs
        wget -c https://sourceforge.net/projects/lmod/files/lua-${LUA_VERSION}.tar.bz2
        tar -xvf lua-${LUA_VERSION}.tar.bz2
        rm -rf lua-${LUA_VERSION}.tar.bz2
        cd lua-${LUA_VERSION}
        ./configure --prefix=${PWD}/install
        make
        make install
        export LUA_ROOT=${PWD}/install
        cd ..
        wget -c https://sourceforge.net/projects/lmod/files/Lmod-${LMOD_VERSION}.tar.bz2
        tar -xvf Lmod-${LMOD_VERSION}.tar.bz2
        rm -rf Lmod-${LMOD_VERSION}.tar.bz2
        cd Lmod-${LMOD_VERSION}
        ./configure --prefix=${PWD}/install --with-lua=${LUA_ROOT}/bin/lua \
            --with-luac=${LUA_ROOT}/bin/luac --with-lua_include=${LUA_ROOT}/include
        make
        make install
        export LMOD_ROOT=${PWD}/install
        cd ..
        source ${LMOD_ROOT}/lmod/${LMOD_VERSION}/init/profile
        sudo ln -sf ${LMOD_ROOT}/lmod/${LMOD_VERSION}/init/profile /etc/profile.d/lmod.sh
        module -v

    - name: Cache Dependencies
      id: cache-dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.install_dir }}/spack
        key: spack-${{ runner.os }}-${{ inputs.architecture }}-${{ hashFiles('**/spack.lock') }}
        restore-keys: |
          spack-${{ runner.os }}-${{ inputs.architecture }}-${{ hashFiles('**/spack.lock') }}

    - name: Create Spack Environment and Install Dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        ${{ env.install_dir }}/geogate/.github/workflows/scripts/install_deps.sh \
          -i ${{ env.install_dir }}
      shell: bash

    - name: Checkout CDEPS Data Components
      uses: actions/checkout@v4
      with:
        repository: ESCOMP/CDEPS
        path: ${{ env.install_dir }}/cdeps

    - name: Install CDEPS
      run: |
        source ${LMOD_ROOT}/lmod/${LMOD_VERSION}/init/profile
        module avail
        ls -al ${{ env.install_dir }}/envs/test
        #export PATH=${{ inputs.dependencies_install_dir }}/view/bin:$PATH
        #export ESMFMKFILE=${{ inputs.dependencies_install_dir }}/view/lib/esmf.mk
        #export FC=gfortran
        #cd ${{ inputs.app_install_dir }}/cdeps
        cd ${{ env.install_dir }}/cdeps
        #mkdir build
        #cd build
        #cmake -DCMAKE_INSTALL_PREFIX=${{ inputs.app_install_dir }} \
        #  -DPIO_C_LIBRARY=${{ inputs.dependencies_install_dir }}/view/lib \
        #  -DPIO_C_INCLUDE_DIR=${{ inputs.dependencies_install_dir }}/view/include \
        #  -DPIO_Fortran_LIBRARY=${{ inputs.dependencies_install_dir }}/view/lib \
        #  -DPIO_Fortran_INCLUDE_DIR=${{ inputs.dependencies_install_dir }}/view/include \
        #  -DCMAKE_Fortran_FLAGS="-ffree-line-length-none -fallow-argument-mismatch -fallow-invalid-boz" \
        #  -DDISABLE_FoX=ON ../
        #make
        #make install
      shell: bash
