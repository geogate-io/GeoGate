name: Test plugins

env:
  spack_version: v1.0.0-alpha.2
  esmf_version: develop
  compiler_version: latest
  install_dir: ${{ github.workspace }}/app

on:
  push:
    branches: [ main, feature/cicd ]
  #pull_request:
  #  types: [opened, synchronize, reopened, labeled, unlabeled]
  #  branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
    - name: Install Core Development Tools
      run: |
        sudo apt-get -qq update
        sudo apt-get -qq install \
          wget tar unzip file gringo llvm meson \
          build-essential binutils-dev gfortran \
          python3-dev python3-pip python3-yaml \
          curl libcurl4-openssl-dev tcl tcl-dev \
          libosmesa6-dev libegl1-mesa-dev mesa-utils
        
        ls /usr/bin/llvm-config
      shell: bash

    - name: Checkout Component Repository
      uses: actions/checkout@v4
      with:
        path: ${{ env.install_dir }}/geogate

    - name: Restore Cached Dependencies
      id: restore-cache
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.install_dir }}/spack
        key: spack-${{ runner.os }}-

    - name: Create Spack Environment and Install Dependencies
      if: steps.restore-cache.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.restore-cache.outputs.cache-hit }}
        #${{ env.install_dir }}/geogate/.github/workflows/scripts/install_deps.sh \
        #  -i ${{ env.install_dir }}
      shell: bash

    #- name: Save Dependencies to Cache
    #  id: save-cache
    #  uses: actions/cache/save@v4
    #  with:
    #    path: ${{ env.install_dir }}/spack
    #    key: spack-${{ runner.os }}-${{ hashFiles('**/spack.lock') }}

    - name: Checkout CDEPS Data Components
      uses: actions/checkout@v4
      with:
        repository: ESCOMP/CDEPS
        path: ${{ env.install_dir }}/cdeps
        submodules: true

    - name: Install CDEPS
      run: |
        cd ${{ env.install_dir }}
        . spack/share/spack/setup-env.sh
        . $(spack location -i lmod)/lmod/lmod/init/bash
        module load esmf
        module li
        export FC=gfortran
        cd ${{ env.install_dir }}/cdeps
        mkdir build
        cd build
        cmake -DCMAKE_INSTALL_PREFIX=${{ env.install_dir }}/cdeps/install \
          -DPIO_C_LIBRARY=$parallelio_ROOT/lib \
          -DPIO_C_INCLUDE_DIR=$parallelio_ROOT/include \
          -DPIO_Fortran_LIBRARY=$parallelio_ROOT/lib \
          -DPIO_Fortran_INCLUDE_DIR=$parallelio_ROOT/include \
          -DCMAKE_Fortran_FLAGS="-DCPRGNU -ffree-form -ffree-line-length-none -fallow-argument-mismatch" \
          -DDISABLE_FoX=ON ../
        make
        make install
      shell: bash
